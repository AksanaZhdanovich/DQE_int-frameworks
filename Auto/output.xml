<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0 (Python 3.9.5 on win32)" generated="20220502 01:25:24.734" rpa="false" schemaversion="3">
<suite id="s1" name="Test" source="C:\Users\Aksana_Zhdanovich\PycharmProjects\robotFramework\Automation\test.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymssql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20220502 01:25:24.771" level="INFO">Connecting using : pymssql.connect(database=AdventureWorks2012, user=testuser, password=test, host=localhost, port=1433) </msg>
<status status="PASS" starttime="20220502 01:25:24.764" endtime="20220502 01:25:24.794"/>
</kw>
<test id="s1-t1" name="Check Person.Address.Addressline1 does not have NULL values" line="14">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>SELECT count(*) AS cnt_of_NULL FROM [Person].[Address] WHERE AddressLine1 is NULL</arg>
<arg>0</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20220502 01:25:24.795" level="INFO">Executing : Check If Exists In Database  |  SELECT count(*) AS cnt_of_NULL FROM [Person].[Address] WHERE AddressLine1 is NULL </msg>
<msg timestamp="20220502 01:25:24.795" level="INFO">Executing : Query  |  SELECT count(*) AS cnt_of_NULL FROM [Person].[Address] WHERE AddressLine1 is NULL </msg>
<status status="PASS" starttime="20220502 01:25:24.795" endtime="20220502 01:25:24.796"/>
</kw>
<doc>Checking Addressline1 does not have NULL values
| * Test Steps *
| 1. Select count of rows in [Person].[Address]
| that have NULL values for Addressline1 column
| 2. Count number of rows returned
|
| * Expected result *
| 1. No rows return</doc>
<tag>№1, tbl = Person.Person.Address</tag>
<status status="PASS" starttime="20220502 01:25:24.794" endtime="20220502 01:25:24.796"/>
</test>
<test id="s1-t2" name="Check Person.Address.City does not have numeric values" line="27">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>SELECT City,count(*) AS Cnt FROM Person.Address WHERE City like '%[0-9]%' GROUP BY City</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20220502 01:25:24.797" level="INFO">Executing : Row Count Is 0  |  SELECT City,count(*) AS Cnt FROM Person.Address WHERE City like '%[0-9]%' GROUP BY City </msg>
<msg timestamp="20220502 01:25:24.797" level="INFO">Executing : Row Count  |  SELECT City,count(*) AS Cnt FROM Person.Address WHERE City like '%[0-9]%' GROUP BY City </msg>
<status status="PASS" starttime="20220502 01:25:24.797" endtime="20220502 01:25:24.827"/>
</kw>
<doc>Checking City column for numeric values
| * Test Steps *
| 1. Select count of rows in [Person].[Address]
| that have NULL values for Addressline1 column
|
| * Expected results *
| 1. Number of returned rows = 0</doc>
<tag>№2, tbl = Person.Person.Address</tag>
<status status="PASS" starttime="20220502 01:25:24.796" endtime="20220502 01:25:24.827"/>
</test>
<test id="s1-t3" name="Check Production.Document table exists" line="39">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>Document</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20220502 01:25:24.828" level="INFO">Executing : Table Must Exist  |  Document </msg>
<msg timestamp="20220502 01:25:24.828" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='Document' </msg>
<status status="PASS" starttime="20220502 01:25:24.828" endtime="20220502 01:25:24.829"/>
</kw>
<doc>Checking that table 'Production.Document' exists in the database
| * Test Steps *
| 1. Check that table exists
|
| * Expected results *
| 1. Table exists</doc>
<tag>№3, tbl = Production.Production.Document</tag>
<status status="PASS" starttime="20220502 01:25:24.827" endtime="20220502 01:25:24.829"/>
</test>
<test id="s1-t4" name="Check column names from Production.Document" line="50">
<kw name="Query" library="DatabaseLibrary">
<var>${column_name}</var>
<arg>select COLUMN_NAME from ${dbName}.INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'Document'</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220502 01:25:24.830" level="INFO">Executing : Query  |  select COLUMN_NAME from AdventureWorks2012.INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'Document' </msg>
<msg timestamp="20220502 01:25:24.831" level="INFO">${column_name} = [('DocumentNode',), ('DocumentLevel',), ('Title',), ('Owner',), ('FolderFlag',), ('FileName',), ('FileExtension',), ('Revision',), ('ChangeNumber',), ('Status',), ('DocumentSummary',), ('Document',), ...</msg>
<status status="PASS" starttime="20220502 01:25:24.830" endtime="20220502 01:25:24.831"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${column_name} == ${columns}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20220502 01:25:24.831" endtime="20220502 01:25:24.831"/>
</kw>
<doc>Checking that table Production.Document has all columns
| * Test Steps *
| 1. Check that all columns are in the table Document
|
| Expected results:
| 1. All columns from [('DocumentNode',), ('DocumentLevel',), ('Title',), ('Owner',), ('FolderFlag',), ('FileName',),('FileExtension',), ('Revision',), ('ChangeNumber',), ('Status',), ('DocumentSummary',), ('Document',),('rowguid',), ('ModifiedDate',)] are in the Document table</doc>
<tag>№4, tbl = Production.Production.Document</tag>
<status status="PASS" starttime="20220502 01:25:24.829" endtime="20220502 01:25:24.831"/>
</test>
<test id="s1-t5" name="Check Production.UnitMeasure.UnitMeasureCode has only unique values" line="63">
<kw name="Query" library="DatabaseLibrary">
<var>@{results}</var>
<arg>SELECT COUNT (DISTINCT UnitMeasureCode) as d_cnt, COUNT(*) as t_cnt from Production.UnitMeasure</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220502 01:25:24.832" level="INFO">Executing : Query  |  SELECT COUNT (DISTINCT UnitMeasureCode) as d_cnt, COUNT(*) as t_cnt from Production.UnitMeasure </msg>
<msg timestamp="20220502 01:25:24.833" level="INFO">@{results} = [ (38, 38) ]</msg>
<status status="PASS" starttime="20220502 01:25:24.832" endtime="20220502 01:25:24.833"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${results[0][0]}</arg>
<arg>${results[0][1]}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20220502 01:25:24.833" endtime="20220502 01:25:24.833"/>
</kw>
<doc>Checking that column 'UnitMeasureCode' in Production.UnitMeasure table (has only unique values)
| * Test Steps *
| 1. Get number of unique values in 'UnitMeasureCode' column
| 2. Get total number of rows in Production.UnitMeasure table
|
| * Expected results *
| 1. Total number of records in Production.UnitMeasure table is equal to number
| of unique values in 'UnitMeasureCode' column</doc>
<tag>№5, tbl = Production.UnitMeasure.UnitMeasureCode</tag>
<status status="PASS" starttime="20220502 01:25:24.831" endtime="20220502 01:25:24.833"/>
</test>
<test id="s1-t6" name="Check Null value cannot be added in the Production.UnitMeasure.Name column" line="77">
<kw name="Get File" library="OperatingSystem">
<var>${sql_query}</var>
<arg>./Resources/insert_unitmes.sql</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220502 01:25:24.834" level="INFO" html="true">Getting file '&lt;a href="file://C:\Users\Aksana_Zhdanovich\PycharmProjects\robotFramework\Resources\insert_unitmes.sql"&gt;C:\Users\Aksana_Zhdanovich\PycharmProjects\robotFramework\Resources\insert_unitmes.sql&lt;/a&gt;'.</msg>
<msg timestamp="20220502 01:25:24.834" level="INFO">${sql_query} = INSERT INTO Production.UnitMeasure (UnitMeasureCode, Name) VALUES ('AAA',NULL);</msg>
<status status="PASS" starttime="20220502 01:25:24.834" endtime="20220502 01:25:24.834"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<var>${err_msg}</var>
<arg>*</arg>
<arg>Execute SQL String</arg>
<arg>${sql_query}</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${sql_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220502 01:25:24.835" level="INFO">Executing : Execute SQL String  |  INSERT INTO Production.UnitMeasure (UnitMeasureCode, Name) VALUES ('AAA',NULL); </msg>
<msg timestamp="20220502 01:25:24.837" level="FAIL">IntegrityError: (515, b"Cannot insert the value NULL into column 'Name', table 'AdventureWorks2012.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severity 16:\nGeneral SQL Server error: Check messages from the SQL Server\n")</msg>
<status status="FAIL" starttime="20220502 01:25:24.834" endtime="20220502 01:25:24.837"/>
</kw>
<msg timestamp="20220502 01:25:24.837" level="INFO">${err_msg} = IntegrityError: (515, b"Cannot insert the value NULL into column 'Name', table 'AdventureWorks2012.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severi...</msg>
<status status="PASS" starttime="20220502 01:25:24.834" endtime="20220502 01:25:24.837"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220502 01:25:24.838" level="INFO">IntegrityError: (515, b"Cannot insert the value NULL into column 'Name', table 'AdventureWorks2012.Production.UnitMeasure'; column does not allow nulls. INSERT fails.DB-Lib error message 20018, severity 16:\nGeneral SQL Server error: Check messages from the SQL Server\n")</msg>
<status status="PASS" starttime="20220502 01:25:24.837" endtime="20220502 01:25:24.838"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${err_msg}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220502 01:25:24.838" level="INFO">Length is 272</msg>
<status status="PASS" starttime="20220502 01:25:24.838" endtime="20220502 01:25:24.838"/>
</kw>
<doc>Checking that Null value for Name column cannot be inserted
| * Test Steps *
| 1. Insert Name=NUll in the UnitMeasure table
|
| * Expected results *
| 1. SQL script is executed with an error</doc>
<tag>№6, tbl = Production.UnitMeasure.Name</tag>
<status status="PASS" starttime="20220502 01:25:24.834" endtime="20220502 01:25:24.838"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20220502 01:25:24.838" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20220502 01:25:24.838" endtime="20220502 01:25:24.838"/>
</kw>
<doc>Robot resources and variables for all tests</doc>
<status status="PASS" starttime="20220502 01:25:24.736" endtime="20220502 01:25:24.838"/>
</suite>
<statistics>
<total>
<stat pass="6" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">№1, tbl = Person.Person.Address</stat>
<stat pass="1" fail="0" skip="0">№2, tbl = Person.Person.Address</stat>
<stat pass="1" fail="0" skip="0">№3, tbl = Production.Production.Document</stat>
<stat pass="1" fail="0" skip="0">№4, tbl = Production.Production.Document</stat>
<stat pass="1" fail="0" skip="0">№5, tbl = Production.UnitMeasure.UnitMeasureCode</stat>
<stat pass="1" fail="0" skip="0">№6, tbl = Production.UnitMeasure.Name</stat>
</tag>
<suite>
<stat pass="6" fail="0" skip="0" id="s1" name="Test">Test</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
